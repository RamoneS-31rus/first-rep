# Задания 1. Найти площадь и периметр прямоугольного треугольника по двум заданным катетам.
# Решение:
import math

AB = input("Длина первого катета: ")
AC = input("Длина второго катета: ")

AB = float(AB)
AC = float(AC)

BC = math.sqrt(AB**2 + AC**2)

S = (AB * AC) / 2
P = AB + AC + BC

print("Площадь треугольника: %.2f" % S)
print("Периметр треугольника: %.2f" % P)

# Задание 2. Пользователь вводит трехзначное число. Программа должна сложить цифры, из которых состоит это число.
#            Например, если было введено 345, программа должна вывести на экран число 12, так как 3 + 4 + 5 = 12.
# Вариант решения 1:
n = input("Введите трехзначное число: ")
n = int(n)

d1 = n % 10
n = n // 10
d2 = n % 10
n = n // 10

print("Сумма цифр числа:", n + d1 + d2)
#Вариант решения 2:
n = input("Введите трехзначное число: ")
n = int(n)

d1 = n % 10
d2 = n % 100 // 10
d3 = n // 100

print("Сумма цифр числа:", d1 + d2 + d3)

# Задание 3. Пользователь вводит любую последовательность чисел.
#            Программа должна отсортировать введенные данные пузырьковым методом.
# Решение:
print("Введите числа через пробел. По окончании ввода нажмите Enter")

a = list(map(int, input().split()))
n = len(a)

def sort(a_sort):
    t = len(a_sort) - 1 # пока t в диапазоне количества символов в массиве
    for i in range (0, t):  # пока i в диапазоне от 0 до максимального размера массива
        for x in range (0, t):
            if a_sort[x] > a_sort[x+1]:
                a_sort[x], a_sort[x+1] = a_sort[x+1], a_sort[x]
    return a_sort
a_sort = a
sort(a_sort)

print(' '.join(map(str, a_sort)))

# Задание 4. Дан отсортированный список, пользователь вводит любое число.
#            Необходимо проверить имеется вводимое число в списке или нет. Реализовать задачу бинарным поиском.
# Решение:
A = [1,3,7,9,14,16,17,19,20,21,25,30,33,35,40,42,51,56,63,78]
print("Введите число:")
K = int(input())

mid = len(A) // 2
low = 0
high = len(A) - 1

while A[mid] != K and low <= high:
    if K > A[mid]:
        low = mid + 1
    else:
        high = mid - 1
    mid = (low + high) // 2

if low > high:
    print("Данное число в списке не найдено.")
else:
    print("Позиция искомого числа в списке:", mid)